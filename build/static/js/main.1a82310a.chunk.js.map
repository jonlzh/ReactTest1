{"version":3,"sources":["Main/Main.jsx","App.js","serviceWorker.js","index.js"],"names":["React","Component","Home","react_default","a","createElement","About","Contact","Sub1","Sub2","Topics","_ref2","match","react_router","exact","path","render","NavigationBar","react_router_dom","to","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","temp","user","message","className","component","Boolean","window","location","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1a82310a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Main.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Main extends React.Component {\r\n  constructor(props){\r\n      super(props);\r\n      this.message1 = \"static msg\"\r\n      this.user = props.user;\r\n      this.message = props.message;\r\n  }\r\n\r\n  render(props){\r\n      return(\r\n        //<p>User: {this.user} Message: {this.message}</p>\r\n        <p>Message: {this.message1}</p>\r\n      )\r\n  }\r\n}\r\n{/* \r\nMain.propTypes = {\r\n    user: PropTypes.string,\r\n    message: propTypes.string,\r\n}\r\n*/}\r\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Main from './Main/Main';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      temp: [\n        { user: \"Paganini\", message: \"message1\" },\n        { user: \"user2\", message: \"message2\" },\n      ],\n    }\n  }\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <div className=\"Header\">\n            <h1>Hello Paganini, Welcome to Paga world</h1>\n          </div>\n\n          <div className=\"Body\">\n            <div className=\"LeftBody\">\n              {/* \n                to call the navigation menu\n              */}\n              <NavigationBar />\n            </div>\n\n            <div className=\"RightBody\">\n              <div className=\"info\">\n                {/* \n                  to display the stuff that is selected based on the left navigation\n                */}\n                <Route exact path=\"/\" component={Home} />\n                <Route path=\"/about\" component={About} />\n                <Route path=\"/topics\" component={Topics} />\n                <Route path=\"/contact\" component={Contact} />\n                <Route path=\"/topics/sub1\" component={Sub1} />\n                <Route path=\"/topics/sub2\" component={Sub2} />\n              </div>\n            </div>\n            <div className=\"clear\"></div>\n\n            {/* \n          this.state.temp.map((main) => {\n            \n            <Main user={main.user} message={main.message} key={main.user}/> \n          \n          \n        })\n          */ }\n          </div>\n        </div>\n\n        <div>\n\n        </div>\n      </Router>\n    );\n  }\n}\n\nfunction Home() {\n  return (\n    <div>\n      <h2>Home</h2>\n      <p>home content here</p>\n    </div>\n  );\n}\n\nfunction About() {\n  return (\n    <div>\n      <h2>About</h2>\n      <p>about us content here...</p>\n    </div>\n  );\n}\n\nfunction Contact() {\n  return (\n    <div>\n      <h2>Contact Us</h2>\n      <p>more info, contact us!</p>\n    </div>\n  );\n}\n\nfunction Sub1() {\n  return (\n    <div>\n      <h2>Sub Topic 1</h2>\n      <p>As a ....</p>\n    </div>\n  );\n}\n\nfunction Sub2() {\n  return (\n    <div>\n      <h2>Sub Topic2</h2>\n      <p>Long long time ago ....</p>\n    </div>\n  );\n}\n\nfunction Topic({ match }) {\n  if(match.params.id == \"sub1\")\n  {\n    return <h3>sub1111</h3>\n  }\n  else\n  {\n    return (\n      <h3>Requested Param: {match.params.id}</h3>\n    );\n  }\n}\n\nfunction Topics({ match }) {\n  return (\n    <div>\n      <h2>Topics</h2>\n      {/* \n      <ul>\n        <li>\n          <Link to={`${match.url}/components`}>Components</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/props-v-state`}>Props v. State</Link>\n        </li>\n      </ul>\n      \n      <Route path={`${match.path}/:id`} component={Topic} />\n      */}\n      <Route\n        exact\n        path={match.path}\n        render={() => <h3>Please select a topic.</h3>}\n      />\n    </div>\n  );\n}\n\nfunction NavigationBar() {\n  return (\n    <ul>\n      <h3>Navigation</h3>\n      <li>\n        <Link to=\"/\">Home</Link>\n      </li>\n      <li>\n        <Link to=\"/about\">About</Link>\n      </li>\n      <li>\n        <Link to=\"/topics\">Topics</Link>\n        <ul>\n          <li>\n          <Link to=\"/topics/sub1\">sub1</Link>\n          </li>\n          <li>\n          <Link to=\"/topics/sub2\">sub2</Link>\n          </li>\n        </ul>\n      </li>\n      <li>\n          <Link to=\"/contact\">Contact Us</Link>\n          </li>\n    </ul>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}